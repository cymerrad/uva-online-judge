#include <iostream>
#include <unordered_map>

using namespace std;
unordered_map<int, vector<int>> len3Chains = {
		{228, {13931}},
		{162, {13759, 18587}},
		{156, {23291}},
		{144, {18869}},
		{138, {31583}},
		{132, {24847}},
		{120, {10357}},
		{114, {6899, 9923, 25999, 30139, 30403}},
		{108, {10831, 14173, 16033, 16921, 21821, 22063, 24121}},
		{102, {4159, 18797, 19759, 28309, 30559, 31277}},
		{96, {6637, 7867, 11497, 12281, 14957, 16127, 17107, 18301, 19237, 19507, 25147, 27551, 29917}},
		{90, {8447, 16007, 20143, 21227, 22067, 23099, 24709, 27017, 29483, 29671, 30223}},
		{84, {6469, 7673, 9923, 10429, 13513, 15193, 16249, 17123, 17623, 21943, 22483, 24113, 24359, 29669, 30223}},
		{78, {5023, 5153, 6373, 6581, 7333, 9473, 10321, 10993, 11621, 13421, 13513, 16451, 16573, 17581, 18301, 18461, 18593, 20443, 21191, 23201, 25033, 26513, 29803, 31391}},
		{72, {4057, 5009, 6827, 7757, 7937, 8317, 9137, 10567, 10709, 12569, 15329, 15919, 16267, 18379, 19319, 19609, 21347, 26417, 29429, 31397}},
		{66, {2477, 4517, 7621, 8101, 8867, 9547, 10111, 10531, 13331, 13487, 14747, 14951, 16187, 16487, 18947, 20117, 20807, 21247, 22651, 23977, 24527, 25171, 25391, 25601, 25951, 26561, 26717, 27751, 28097, 29231, 29501}},
		{60, {2083, 2557, 4229, 5273, 5927, 9811, 11657, 11719, 12143, 13477, 15913, 16301, 16703, 17669, 17791, 19483, 21001, 21347, 22751, 24473, 25183, 25349, 25463, 26513, 27277, 27823, 28807, 30307}},
		{54, {1613, 1879, 2029, 2099, 3463, 4283, 4409, 4969, 5333, 6089, 7433, 9049, 9749, 9833, 10193, 11443, 11833, 12379, 12799, 13109, 13259, 14293, 16829, 17443, 17573, 17989, 19489, 19759, 21013, 21269, 21379, 21713, 22643, 22853, 23633, 24419, 24923, 24979, 25303, 25469, 25889, 26209, 26573, 27793, 29023, 30649, 30763, 31069}},
		{48, {3121, 4003, 4241, 4703, 4813, 7321, 7963, 8641, 9491, 10163, 11273, 11351, 11731, 12281, 13171, 13781, 14341, 14543, 14621, 14731, 14843, 15193, 15511, 16091, 16253, 16433, 16603, 16831, 17293, 18701, 20201, 21221, 21433, 21881, 21943, 22573, 23321, 23671, 24133, 24421, 25073, 25343, 25561, 26261, 27143, 27361, 27431, 28181, 29173, 29741}},
		{42, {727, 1579, 1699, 1789, 3079, 3407, 3779, 4007, 5189, 5309, 5479, 5897, 6337, 6577, 7109, 7309, 8539, 8887, 9007, 9437, 9697, 12119, 12239, 13297, 13879, 13967, 14657, 15359, 15559, 15817, 16189, 16369, 16519, 16787, 16937, 17539, 17839, 18329, 18917, 19447, 19979, 20177, 20399, 21059, 21757, 22307, 22637, 22769, 23167, 23497, 23677, 23747, 23887, 24197, 24509, 24989, 25219, 25307, 25717, 25847, 25999, 26209, 26717, 28309, 29837, 30347, 31489}},
		{36, {1487, 1877, 2467, 2927, 3181, 3271, 3511, 3637, 3697, 3931, 4021, 4217, 4337, 4567, 5867, 6911, 7211, 7297, 7487, 7757, 8017, 8317, 8747, 8971, 9341, 9461, 9551, 10067, 10651, 10867, 11411, 11831, 11971, 13841, 14071, 14851, 15101, 15277, 15607, 15787, 16657, 17167, 17791, 17977, 18181, 19001, 19237, 19471, 19681, 20071, 20147, 20717, 21211, 21347, 21701, 21767, 22037, 22157, 22271, 22397, 23027, 23131, 24097, 24371, 25867, 25981, 26321, 26387, 26597, 26777, 27031, 27107, 27617, 27701, 27847, 28051, 28477, 28687, 29137, 29401, 30187, 30941, 31321, 31627}},
		{30, {1093, 1493, 1693, 1801, 2311, 2351, 2549, 2939, 3049, 3191, 3469, 3613, 3709, 3989, 4297, 4591, 4729, 4801, 5021, 5867, 6007, 6143, 6217, 6367, 6421, 6491, 6577, 6703, 6763, 6917, 7177, 7877, 7933, 8009, 8513, 8863, 9491, 9689, 9871, 10193, 10369, 10529, 10567, 10627, 11027, 11213, 11257, 11437, 11519, 11867, 12011, 12391, 12553, 12611, 12923, 13033, 13267, 13337, 13381, 13799, 13903, 14221, 15331, 15467, 16193, 16573, 16631, 16699, 16871, 16981, 17047, 17107, 17291, 17509, 17597, 17851, 18059, 18311, 18671, 18839, 19259, 20533, 20899, 21001, 21499, 21587, 22093, 22129, 22511, 22639, 22877, 23057, 23297, 23339, 23563, 23603, 23827, 24121, 24733, 25057, 25969, 26053, 26111, 26357, 27211, 27479, 27551, 27967, 28151, 28289, 28729, 28949, 29303, 29759, 29803, 30109, 30181, 30697, 31091, 31159, 31327, 31481, 31627}},
		{24, {373, 1039, 1069, 1559, 1823, 1949, 2089, 2309, 2609, 2729, 2879, 3323, 3559, 4003, 4153, 5879, 6043, 6173, 6373, 6779, 7369, 7433, 7559, 7793, 8123, 8329, 8599, 8713, 8783, 8839, 9043, 9413, 9473, 10289, 10639, 10979, 11069, 11149, 11399, 11503, 11633, 11839, 12049, 12203, 12253, 12553, 12589, 13103, 13883, 14173, 14723, 14843, 15053, 15083, 15193, 15559, 15619, 15889, 16763, 16879, 16963, 17029, 17183, 17293, 17659, 17713, 18433, 18493, 18749, 19183, 19379, 19483, 19753, 20023, 20849, 21139, 22343, 22853, 23203, 23719, 24919, 24989, 25609, 25693, 26203, 27043, 27893, 27919, 28549, 28663, 30113, 30469, 30529, 31223, 31769, 31859}},
		{18, {113, 193, 383, 751, 821, 1213, 1453, 1531, 1583, 1871, 1913, 2143, 2203, 2251, 2503, 2671, 2693, 2801, 3001, 3511, 3673, 3761, 3911, 4093, 4253, 4373, 5003, 5153, 5261, 5381, 5483, 5821, 5861, 6011, 6211, 6563, 6673, 6701, 6983, 7193, 7333, 7541, 7603, 7681, 7723, 8293, 8563, 8663, 8831, 8933, 9091, 9221, 9613, 9931, 10253, 10753, 11113, 11243, 11681, 11923, 12373, 12653, 12763, 12923, 13291, 13381, 13451, 13693, 13763, 13841, 14401, 14621, 14723, 14851, 15241, 15271, 15313, 15583, 15731, 15773, 15901, 16231, 17341, 17383, 17431, 17921, 18181, 18503, 18713, 19051, 19121, 19231, 19681, 20071, 20183, 20323, 20903, 20983, 21121, 21383, 21481, 21803, 21893, 22073, 22153, 22531, 22751, 23021, 23321, 23563, 24133, 24481, 24763, 24841, 24953, 25153, 25373, 25933, 25981, 26153, 26321, 27773, 27883, 27983, 28051, 28183, 29173, 29251, 29723, 30011, 30223, 30431, 30671, 31033, 31231}},
		{12, {47, 139, 167, 199, 239, 257, 397, 467, 727, 797, 929, 997, 1427, 1777, 1987, 2087, 2269, 2399, 2609, 2687, 2707, 2729, 2777, 2999, 3037, 3347, 3919, 3989, 4397, 4639, 4679, 4789, 4919, 4987, 5507, 5557, 5827, 6067, 6089, 6959, 7517, 7549, 8069, 8167, 8419, 8707, 8807, 8837, 9467, 9619, 9859, 10139, 10169, 10247, 10289, 10589, 11059, 11287, 11399, 11677, 11719, 12227, 12277, 12409, 12479, 12647, 12829, 13159, 13217, 13697, 14437, 14537, 14747, 14867, 15307, 15349, 15427, 16607, 16649, 17029, 17377, 17419, 17657, 17737, 18199, 18289, 18329, 18427, 18719, 19207, 19379, 19477, 19559, 20089, 20149, 20509, 20747, 21649, 21727, 21839, 22067, 22147, 22279, 22697, 22727, 23029, 23537, 23789, 23887, 24659, 25577, 25609, 25747, 25919, 26237, 26297, 26489, 26669, 26687, 27259, 27739, 28057, 28099, 28547, 28579, 28909, 29009, 29167, 29399, 29587, 30047, 30637, 30817, 30869, 31039, 31247}},
		{6, {17, 31, 151, 167, 227, 271, 347, 367, 557, 587, 727, 941, 971, 1117, 1181, 1217, 1277, 1291, 1361, 1427, 1447, 1487, 1657, 1777, 1861, 1901, 1987, 2131, 2281, 2411, 2687, 2707, 2791, 2897, 2957, 3527, 3631, 3727, 4127, 4451, 4507, 4591, 4637, 4651, 4787, 4931, 4987, 5297, 5407, 5471, 5557, 5641, 5737, 5801, 6067, 6257, 6857, 6971, 7207, 7517, 7577, 7817, 7867, 8081, 8111, 8231, 8707, 8741, 9001, 9337, 9391, 10247, 10331, 10601, 10651, 10847, 11491, 11777, 11801, 11897, 11927, 12037, 12491, 12541, 12577, 12911, 12967, 13037, 13171, 13681, 13751, 13901, 14537, 14551, 15187, 15307, 15461, 15761, 16091, 16217, 16421, 16481, 16561, 16931, 16981, 17021, 17041, 17321, 17377, 18121, 18301, 18427, 19207, 19457, 19571, 19597, 20101, 20117, 20747, 21157, 21517, 21557, 21991, 22067, 22147, 22441, 23197, 23741, 23761, 23887, 24071, 24407, 24671, 25457, 25577, 25667, 26107, 26387, 26947, 26981, 27061, 27271, 27737, 27767, 27941, 28277, 28591, 28657, 28921, 29021, 29167, 29327, 29867, 30307, 30971, 31147, 31177, 31247, 31321}},
		{4, {3}},
		{2, {3}}};
vector<int> len3Keys = {228, 162, 156, 144, 138, 132, 120, 114, 108, 102, 96, 90, 84, 78, 72, 66, 60, 54, 48, 42, 36, 30, 24, 18, 12, 6, 4, 2};
unordered_map<int, vector<int>> len4Chains = {
		{108, {24443}},
		{60, {16007, 28229, 30517}},
		{42, {19037, 22817, 27767}},
		{36, {9661, 10391, 18061, 28771}},
		{30, {4391, 7793, 13537, 13619, 15383, 18493, 19889, 21317, 25643, 27337, 30029, 31247}},
		{24, {499, 2039, 4349, 5669, 7079, 7829, 9719, 9859, 14009, 17419, 19819, 19889, 19949, 26879, 29339}},
		{18, {313, 1033, 1723, 2423, 2713, 2843, 4603, 4933, 6343, 7883, 9643, 12583, 12703, 16993, 18233, 19993, 20753, 22093, 23063, 25303, 25603, 27073, 28393, 28753}},
		{12, {607, 1447, 1487, 1697, 1877, 2647, 3307, 3547, 5407, 6287, 7297, 7817, 10067, 10627, 11777, 12577, 15137, 15737, 15877, 17827, 19727, 19937, 20707, 22027, 22247, 24097, 26017, 27767, 28607}},
		{6, {41, 61, 251, 601, 641, 1091, 1601, 1741, 2371, 2671, 3301, 3911, 4001, 5101, 5381, 5431, 6311, 6361, 9461, 11821, 12101, 12641, 13451, 14621, 14741, 15791, 15901, 17471, 18211, 19471, 20341, 21481, 23321, 24091, 26171, 26681, 26711, 30091, 30631}}};
vector<int> len4Keys = {108, 60, 42, 36, 30, 24, 18, 12, 6};
unordered_map<int, vector<int>> len5Chains = {
		{30, {26891, 30851}}};
vector<int> len5Keys = {30};

void findCycles(int lo, int hi)
{
	// assuming interval [lo, hi]
	int intLen = hi - lo + 1;
	int longestGap = (hi - lo) / 2;
	auto gap = len3Keys.rbegin();
	auto end = len3Keys.rend();
	for (; gap != end; ++gap)
	{
		if (*gap > longestGap)
		{
			break;
		}

		auto chainStarts = len3Chains.at(*gap);
		for (auto &&start : chainStarts)
		{
			// [start, start + gap, start + gap + gap]
			int finish = start + 2 * *gap;
			if (lo <= start && finish <= hi)
			{
				cout << start << " " << start + *gap << " " << finish << endl;
			}
			if (finish > hi)
			{
				break;
			}
		}
	}
	// fuck it, ctrl-C, ctrl-V
	gap = len4Keys.rbegin();
	end = len4Keys.rend();
	for (; gap != end; ++gap)
	{
		if (*gap > longestGap)
		{
			break;
		}

		auto chainStarts = len4Chains.at(*gap);
		for (auto &&start : chainStarts)
		{
			// [start, start + gap, start + gap + gap, start + gap + gap + gap]
			int finish = start + 3 * *gap;
			if (lo <= start && finish <= hi)
			{
				cout << start << " " << start + *gap << " " << start + 2 * *gap << " " << finish << endl;
			}
			if (finish > hi)
			{
				break;
			}
		}
	}
	// this is such an overkill
	// for the record: I know how to absract this
	gap = len5Keys.rbegin();
	end = len5Keys.rend();
	for (; gap != end; ++gap)
	{
		if (*gap > longestGap)
		{
			break;
		}

		auto chainStarts = len5Chains.at(*gap);
		for (auto &&start : chainStarts)
		{
			// [start, start + gap, start + gap + gap, start + gap + gap + gap, start + gap + gap + gap + gap]
			int finish = start + 4 * *gap;
			if (lo <= start && finish <= hi)
			{
				cout << start << " " << start + *gap << " " << start + 2 * *gap << " " << start + 3 * *gap << " " << finish << endl;
			}
			if (finish > hi)
			{
				break;
			}
		}
	}
}

int chains3[] = {228, 162, 156, 144, 138, 132, 120, 114, 108, 102, 96, 90, 84, 78, 72, 66, 60, 54, 48, 42, 36, 30, 24, 18, 12, 6, 4, 2};
int chains4[] = {108, 60, 42, 36, 30, 24, 18, 12, 6};
int chains5[] = {30}; // [26891, 26921, 26951, 26981, 27011], [30851, 30881, 30911, 30941, 30971]


int main(int argc, char const *argv[])
{

#ifdef DEBUG
	ifstream cin;
	try
	{
		cin.open("input.txt");
	}
	catch (const std::exception &e)
	{
		std::cerr << e.what() << '\n';
		cin.close();
		return 1;
	}
#endif
	int lo, hi;
	while (cin >> lo >> hi, lo || hi)
	{
		findCycles(lo, hi);
	}

	return 0;
}
